{
	"class-id": {
		"prefix": "class-id",
		"body": [
			"class-id $1 ${3|public,private|}.",
			"",
			"method-id new public.",
			"procedure division.",
			"    $0",
			"    exit method.",
			"end method.",
			"",
			"end class."
		],
		"description": "class with ctor",
		"scope": "cobol"
	},
	"enum-id": {
		"prefix": [
			"enum-id",
			"ei"
		],
		"body": [
			"*>> <summary>enum-id $1</summary>",
			"enum-id. $1 as \"Status\".",
			"    78 ${2:Item}  value ${3:1}.",
			"end enum $1.",
			""
		],
		"description": "enum-id",
		"scope": "cobol"
	},
	"exec-sql": {
		"prefix": "exec",
		"body": [
			"exec sql include sqlca end-exec."
		],
		"description": "exec sql include",
		"scope": "cobol"
	},
	"exec-sql-begin": {
		"prefix": "exec",
		"body": [
			"exec sql begin declare section end-exec.",
			"$0",
			"exec sql end declare section end-exec."
		],
		"description": "exec sql declare",
		"scope": "cobol"
	},
	"main method-id": {
		"prefix": "main",
		"body": [
			"*>> <summary>method main</summary>",
			"method-id main public static.",
			"procedure division using",
			"           by value args as string occurs any.",
			"    $0",
			"end method.",
			""
		],
		"description": "method-id (main)",
		"scope": "cobol"
	},
	"method-id": {
		"prefix": [
			"method-id",
			"mi"
		],
		"body": [
			"*>> <summary>method $1</summary>",
			"method-id $1.",
			"procedure division.",
			"    $0",
			"end method.",
			""
		],
		"description": "method-id",
		"scope": "cobol"
	},
	"MFUnit Test (Program)": {
		"prefix": [
			"mfu",
			"mfup"
		],
		"body": [
			"       copy \"mfunit_prototypes.cpy\".",
			"",
			"       identification division.",
			"       program-id. Test${1:${TM_FILENAME_BASE/Test(.*)/$1/}}.",
			"",
			"       data division.",
			"       working-storage section.",
			"       78 TEST-Program value \"${1}\".",
			"       copy \"mfunit.cpy\".",
			"       78 TEST-PRELOAD-LIBRARY value \"${3}\".",
			"       01 TEST-PP              procedure-pointer.",
			"",
			"       *> Testcase     : $1",
			"       *>  Description : ${2:The description of the test case}",
			"       procedure division.",
			"           goback returning 0",
			"       .",
			"",
			"       entry MFU-TC-PREFIX & TEST-${1}.",
			"      *> Test code goes here.",
			"           $0",
			"           goback returning MFU-PASS-RETURN-CODE",
			"       .",
			"",
			"      \\$region Test Configuration",
			"      *> Setup Code:",
			"       entry MFU-TC-SETUP-PREFIX & TEST-${1}.",
			"           perform InitializeLinkageData",
			"",
			"           *> Add any other test setup code here",
			"           goback returning 0",
			"       .",
			"",
			"      *> Teardown Code:",
			"       entry MFU-TC-TEARDOWN-PREFIX & TEST-${1}.",
			"           goback returning 0",
			"       .",
			"",
			"      *> Metadata:",
			"       entry MFU-TC-METADATA-SETUP-PREFIX & TEST-${1}.",
			"           move \"${2}\" to MFU-MD-TESTCASE-DESCRIPTION",
			"           move ${4:100000} to MFU-MD-TIMEOUT-IN-MS",
			"           move \"${5:smoke,regression,sanity,interface,other}\" to MFU-MD-TRAITS",
			"           set MFU-MD-SKIP-TESTCASE to False",
			"           goback returning 0",
			"       .",
			"",
			"       InitializeLinkageData section.",
			"           if TEST-PRELOAD-LIBRARY not equal spaces",
			"      *> Load the library that is being tested",
			"               set TEST-PP to entry TEST-PRELOAD-LIBRARY",
			"           end-if",
			"           exit section",
			"       .",
			"      \\$end-region",
			"",
			"       end program Test${1}."
		],
		"description": "MFUNIT skeleton program",
		"scope": "cobol"
	},
	"MFUnit Test (Entry Point)": {
		"prefix": [
			"mfu",
			"mfuep"
		],
		"body": [
			"       Test-${1} Section.",
			"       entry MFU-TC-PREFIX & \"${1}\".",
			"      *> Test code goes here.",
			"           $0",
			"           goback returning MFU-PASS-RETURN-CODE",
			"       .",
			"",
			"      \\$region Test Configuration for ${1}",
			"      *> Setup Code:",
			"       entry MFU-TC-SETUP-PREFIX & \"${1}\".",
			"           goback returning 0.",
			"",
			"      *> Teardown Code:",
			"       entry MFU-TC-TEARDOWN-PREFIX & \"${1}\".",
			"           goback returning 0.",
			"",
			"      *> Metadata:",
			"       entry MFU-TC-METADATA-SETUP-PREFIX & \"${1}\".",
			"           move \"${2}\" to MFU-MD-TESTCASE-DESCRIPTION",
			"           move ${4:100000} to MFU-MD-TIMEOUT-IN-MS",
			"           move \"${5:smoke,regression,sanity,interface,other}\"",
			"                to MFU-MD-TRAITS",
			"           set MFU-MD-SKIP-TESTCASE to False",
			"           goback returning 0.",
			"",
			"      \\$end-region"
		],
		"description": "MFUNIT Test Case as a Entry Point",
		"scope": "cobol"
	},
	"IDENTIFICATION (CICS)": {
		"prefix": "IDENTIFICATION",
		"body": [
			"        IDENTIFICATION DIVISION. ",
			"        PROGRAM-ID. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"        DATA DIVISION.",
			"        WORKING-STORAGE SECTION. ",
			"        01 OUT-MSG.",
			"         02 FILLER PIC X(6) VALUE \"Hello \". ",
			"         02 MSG    PIC X(20).",
			"        01 INP-MSG PIC X(20) VALUE \"What is your name? \".     ",
			"        PROCEDURE DIVISION.",
			"        PARA1.",
			"            EXEC CICS",
			"                 SEND FROM(INP-MSG)",
			"                 ERASE",
			"            END-EXEC",
			"",
			"            EXEC CICS",
			"                 RECEIVE INTO (MSG)",
			"            END-EXEC",
			"",
			"       *",
			"            EXEC CICS",
			"                 SEND FROM (OUT-MSG)",
			"                 ERASE",
			"            END-EXEC",
			"",
			"            EXEC CICS",
			"                 RETURN",
			"            END-EXEC.",
			"",
			"       *",
			"        END PROGRAM $1.",
			""
		],
		"description": "Template for program (CICS)",
		"scope": "cobol"
	},
	"Minimum Line Sequential": {
		"prefix": "identification",
		"body": [
			"       identification division.",
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"",
			"       environment division.",
			"       input-output section.",
			"        file-control.",
			"        select ${2:cust} assign to '${4:$2}.txt'",
			"        organization is line sequential.            ",
			"",
			"       data division.",
			"       file section.",
			"       fd $2.",
			"       01 ${3:$2-file}.",
			"        03 ${5:customer-id}    pic 9(5).",
			"        03 ${6:customer-info}  pic x(65).",
			"",
			"       working-storage section.",
			"       01 ws-eof       pic a. ",
			"",
			"       procedure division.",
			"          open input $2.",
			"             perform until ws-eof='Y'",
			"                read $2",
			"                   at end",
			"                      move 'Y' to ws-eof",
			"                   not at end",
			"                      display ${5} \" => \" ${6}",
			"                end-read",
			"             end-perform",
			"          close $2.",
			"          $0",
			"          goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Minimum template File/Seq",
		"scope": "cobol"
	},
	"Minimum mainframe program [uppercase]": {
		"prefix": "IDENTIFICATION",
		"body": [
			"       IDENTIFICATION DIVISION.",
			"       PROGRAM-ID. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"       AUTHOR. $2.",
			"       INSTALLATION.  ${3:where}.",
			"       DATE-WRITTEN.  ${4:$CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR}.",
			"       DATE-COMPILED. ${5:$4}.",
			"       SECURITY.",
			"       ENVIRONMENT DIVISION.",
			"       CONFIGURATION SECTION.",
			"       SOURCE-COMPUTER. ${6:pc}.",
			"       OBJECT-COMPUTER. ${7:${6}}.",
			"       SPECIAL-NAMES.",
			"       INPUT-OUTPUT SECTION.",
			"       FILE-CONTROL.",
			"       DATA DIVISION.",
			"        FILE SECTION.",
			"        WORKING-STORAGE SECTION.",
			"        LINKAGE SECTION.",
			"       PROCEDURE DIVISION.",
			"        DECLARATIVES.",
			"        END DECLARATIVES.",
			"        main-processing SECTION.",
			"         mainline-paragraph.",
			"             $0",
			"             STOP RUN."
		],
		"description": "Template for mainframe",
		"scope": "cobol"
	},
	"Skelton program": {
		"prefix": "program-id",
		"body": [
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"",
			"       environment division.",
			"       configuration section.",
			"",
			"       data division.",
			"       working-storage section.",
			"",
			"       procedure division.",
			"           $0",
			"           goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Small template for program",
		"scope": "cobol"
	},
	"Minimum program": {
		"prefix": "program-id",
		"body": [
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"       procedure division.",
			"           $0",
			"           goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Minimum template",
		"scope": "cobol"
	},
	"property": {
		"prefix": "property",
		"body": [
			"01 ${2:_prop} ${3:binary-long} private.",
			"method-id. get property #${1:Prop}.",
			"procedure division returning ret as ${3:binary-long}.",
			"    set ret to ${2:_prop}",
			"end method.",
			"method-id. set property #${1:Prop}.",
			"procedure division using by value val as ${3:binary-long}.",
			"    set ${2:_prop} to 0",
			"end method.",
			""
		],
		"description": "set/get property",
		"scope": "cobol"
	},
	"try": {
		"prefix": "try",
		"body": [
			"try",
			"$2",
			"catch ${1:Exception}",
			"   $0",
			"end-try"
		],
		"description": "try catch",
		"scope": "cobol"
	},
	"valuetype-id": {
		"prefix": [
			"vi",
			"valuetype-id"
		],
		"body": [
			"valuetype-id $1 ${2:public}.",
			"01 item string ${2:public}.",
			"",
			"method-id new ${2:public}.",
			"procedure division.",
			"   $0",
			"end method.",
			"",
			"end valuetype."
		],
		"description": "valuetype",
		"scope": "cobol"
	},
	"selection-to-perform-section": {
		"prefix": "perform",
		"body": [
			"           perform ${1:new-section}.",
			"",
			"       ${1} section.",
			"$TM_SELECTED_TEXT",
			"           exit section."
		],
		"description": "Create 'perform section' from selection",
		"scope": "cobol"
	},
	"$set dialect": {
		"prefix": "$set",
		"body": [
			"\\$set dialect\"${2|ans85,bs2000,bs2000-offload,cob370,cob371,cob372,mf,mvs,os390,osvs,vsc21,vsc22,vsc23,vsc24|}\"",
			"$0"
		],
		"description": "Set source dialect",
		"scope": "cobol"
	},
	"$set sourceformat": {
		"prefix": "$set",
		"body": [
			"\\$set sourceformat\"${2|free,variable,fixed|}\"",
			"$0"
		],
		"description": "Set source format",
		"scope": "cobol"
	},
	"$if constant [expr] literal": {
		"prefix": "$if",
		"body": [
			"\\$if ${1:constant-name} ${2|=,<,>,not =,not <,not >|} ${3:literal}",
			"$0",
			"\\$end"
		],
		"description": "$if constant-name |expr| literal",
		"scope": "cobol"
	},
	"$if constant-name [not] defined": {
		"prefix": "$if",
		"body": [
			"\\$if ${1:constant-name} ${2|defined,not defined|}",
			"$0",
			"\\$end"
		],
		"description": "$if constant-name [not] defined",
		"scope": "cobol"
	},
	"$if directive set": {
		"prefix": "$if",
		"body": [
			"\\$if ${1|ACCEPTREFRESH,ACTUALPARAMS,ACUOPT,ACU-COMMENT,ACUSYNC,ACU-UNDERSCORE,ACU,ADDRSV,ADDSYN,ADV,ALIGN,ALPHASTART,ALTER,AMODE,ANIM,ANS85,APOST,AREACHECK,ARITH,ARITHMETIC,ASSIGN,ASSIGN-PRINTER,AUTOLOCK,BELL,BINLIT,BOUNDOPT,BOUND,BRIEF,BS2000,BWZSTAR,BYTE-MODE-MOVE,CALL-RECOVERY,CALLFH,CALLMCS,CALLSORT,CANCEL,CANCELLBR,CASE,CHANGE-MESSAGE,CHARSET,CHECK,CHECKDIV,CHECKNUM,CHECKREFMOD,CICSECM,CMPR2,COBFSTATCONV,COBIDY,COBOL370,COBOLDIR,COLLECTION,COMMAND-LINE-LINKAGE,COMP1,COMP2,COMP-5,COMP-6,COMP,COMS85,CONFIRM,CONSTANT,CONVSPACE,COPYEXT,COPYLBR,COPYLIST,COPYLISTCOMMENT,COPYPATH,COPYSEARCH,CSI,CURRENCY-SIGN,CURRENT-DATE,DATA,DATACOMPRESS,DATA-CONTEXT,DATAMAP,DATE,DB2,DBCHECK,DBCS,DBCSSOSI,DBSPACE,DE-EDIT,DEFAULTBYTE,DEFAULTCALLS,DETECT-LOCK,DG,DIALECT,DIRECTIVES,DIRECTIVES-IN-COMMENTS,DIR,DISPLAY,DISPSIGN,DOSVS,DOTNET,DPC-IN-SUBSCRIPT,DYNAM,EBC-COL-SEQ,ECHO,ECHOALL,ENTCOBOL,EOF-1A,ERRFORMAT,ERRLIST,ERRQ,EXITPROGRAM,FASTCALL,FASTINIT,FASTLINK,FASTSORT,FCD3,FCDALIGN,FCDCAT,FDCLEAR,FCDREG,FILESHARE,FILETYPE,FIXOPT,FLAG,FLAGAS,FLAGEUC,FLAGMIG,FLAGQ,FLAGSINEDIT,FLAGSTD,FOLD-CALL-NAME,FOLD-COPY-NAME,FORM,FP-ROUNDING,GNT,GNTLITLINKSTD,HIDE-MESSAGE,HOSTARITHMETIC,HOSTCONTZERO,HOSTFD,HOST-NUMCOMPARE,HOST-NUMMOVE,HOSTRW,IBM-MS,IBMCOMP,IDENTIFIERLEN,IDXFORMAT,IGNOREEXEC,ILARRAYPROPERTY,ILASSEMBLY,ILCLR,ILCOMPANY,ILCOPYRIGHT,ILCULTURE,ILCUTPREFIX,ILDELAYSIGN,ILDESCRIPTION,ILDOC,ILDYNCALL,ILEXPONENTIATION,ILFILEVERSION,JVMGEN,ILGEN,ILICON,ILKEYFILE,ILKEYNAME,ILMAIN,ILMANIFEST,ILNAMESPACE,ILNATIVE,ILNATIVERESOURCE,ILOPTIMIZEDATA,ILOUTPUT,ILPARAMS,ILPINVOKE,ILPRODUCT,ILPRODUCTVERSION,ILREF,ILRESOURCE,ILSHOWPERFORMOVERLAP,ILSMARTANNOTATE,ILSMARTLINKAGE,ILSMARTNEST,ILSMARTRESTRICT,ILSMARTSERIAL,ILSMARTTRIM,ILSOURCE,ILSTACKSIZE,ILSTATIC,ILSTDLIB,ILSUBSYSTEM,ILTARGET,ILTITLE,ILTRADEMARK,ILUSING,ILVERIFY,ILVERSION,IMPLICITSCOPE,INDD,INFORETURN,INIT-BY-TYPE,INITCALL,INITPTR,INT,INTDATE,INTLEVEL,IOCONV,ISO2002,IXNLSKEY,IXNUMKEY,JAPANESE,KEYCHECK,KEYCOMPRESS,LIBRARIAN,LINE-COUNT,LINKALIAS,LINKCHECK,LIST,LISTPATH,LISTWIDTH,LW,LITLINK,LITVAL-SIZE,LNKALIGN,LOCALCOUNT,LOCALSOURCEFORMAT,LOCKTYPE,MAINFRAME-FLOATING-POINT,MAKESYN,MAPNAME,MAX-ERROR,METHODDEFAULT,MF,MFLEVEL,MFCOMMENT,MFSYNC,MOVE-LEN-CHECK,MS,MVS,NATIONAL,NATIVE,NATIVE-FLOATING-POINT,NCHAR,NLS,NLSCURRENCYLENGTH,NSYMBOL,NULL-ESCAPE,NUMPROC,OBJ,ODOOSVS,ODOSLIDE,OLDBLANKLINE,OLDCOPY,OLDINDEX,OLDNEXTSENTENCE,OLDREADINTO,OLDSTRMIX,OOCTRL,OPT(Intelx86platforms),OPT(Non-Intelx86platforms),OPTIONAL-FILE,OS390,OSEXT,OSVS,OUTDD,OVERRIDE,P64,PANVALET,PARAMCOUNTCHECK,PC1,PCOMP,PERFORM-TYPE,PERFORMOPT,PPLITLINK,PREPLIST,PREPROCESS,PRESERVECASE,PRINT,PRINT-EXT,PROFILE,PROGID-COMMENT,PROGID-INT-NAME,PROTECT-LINKAGE,PROTOTYPE,P,QUAL,QUALPROC,QUERY,QUOTE,RAWLIST,RDFPATH,RDW,RECMODE,RECURSECHECK,REENTRANT,REF,REFNO,REMAINDER,REMOVE,REPORT-LINE,REPOSITORY,RESEQ,RESTRICT-GOTO,RETRYLOCK,REWRITE-LS,RM,RTNCODE-TYPE,RTNCODE-SIZE,RUNTIME-ENCODING,RWHARDPAGE,SAA,SCHEDULER,SEG,SEQCHK,SEQUENTIAL,SERIAL,SETTING,SETTINGS,SHARE-OUTDD,SHOW-DIR,SIGN,SIGNDISCARD,SIGN-FIXUP,SORTTYPE,SOURCEASM,SOURCE-ENCODING,SOURCEFORMAT,SOURCETABSTOP,SQL,SSRANGE,STDERR,STICKY-LINKAGE,STICKY-PERFORM,SUPFF,SWITCH-TYPE,SYMBSTART,SYSPUNCH,TERMPAGE,TESTCOVER,TIME,TRACE,TRUNC,TRUNCCALLNAME,TRUNCCOPY,TRUNCINC,UNICODE,USE,VERBOSE,VSC2,WARNINGS,WARNING,WB2,WB3,WB,WRITELOCK,WRITE-LOCK,WRITETHROUGHWRITETHRU,XDB,XMLGEN,XMLPARSE,XOPEN,XREF,ZEROLENGTHFALSE,ZEROSEQ,ZWB|} set",
			"$0${TM_SELECTED_TEXT}",
			"\\$end"
		],
		"description": "$if directive set",
		"scope": "cobol"
	},
	"$else": {
		"prefix": "$else",
		"body": [
			"\\$else",
			"$0"
		],
		"description": "$else",
		"scope": "cobol"
	},
	"$display message": {
		"prefix": "$display",
		"body": [
			"\\$display ${1:message}",
			"$0"
		],
		"description": "$display message",
		"scope": "cobol"
	},
	"$display VCS = version-number": {
		"prefix": "$display",
		"body": [
			"\\$display VCS = ${1:version-number}",
			"$0"
		],
		"description": "$display VCS = version-number",
		"scope": "cobol"
	},
	">>define directive": {
		"prefix": ">>define",
		"body": [
			">>define ${1:variable-name} as ${2|10,41 + 1,parameter|}",
			"$0"
		],
		"description": ">>define directive",
		"scope": "cobol"
	},
	">>define directive + override": {
		"prefix": ">>define",
		"body": [
			">>define ${1:variable-name} as ${2|10,41 + 1,parameter|} ${3:override}",
			"$0"
		],
		"description": ">>define directive + override",
		"scope": "cobol"
	},
	">>if constant [condition]": {
		"prefix": ">>if ",
		"body": [
			">>if ${1:variable-name} ${2|is defined,= 10|} ",
			"$0${TM_SELECTED_TEXT}",
			">>end-if"
		],
		"description": ">>if constant [condition]",
		"scope": "cobol"
	},
	">>evaluate directive + override": {
		"prefix": ">>evaluate",
		"body": [
			">>evaluate ${1|true,false,10,41 + 1,literal|}",
			">>when ${2:expression}",
			"$0${TM_SELECTED_TEXT}",
			">>end-evaluate"
		],
		"description": ">>evaluate.. >>when... >>end-evaluate",
		"scope": "cobol"
	}
}
